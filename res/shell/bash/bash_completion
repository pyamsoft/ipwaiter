# The GPLv2 License
#
#   Copyright (C) 2017  Peter Kenji Yamanaka
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

_ipwaiter()
{
  local cur
  local prev
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  local ipwaiter_short_options
  local ipwaiter_long_options
  ipwaiter_short_options="-A -D -s -d -F -H -L -R -O -v -h"
  ipwaiter_long_options="--add --delete --src --dst \
    --fire --hire --list --raw --orders --version --help"

  local ipwaiter_chains
  local raw_ipwaiter_chains
  local ipwaiter_orders
  local possible_order_dirs
  local raw_mode
  local next_argument_is_order_dir

  possible_order_dirs="/etc/ipwaiter/orders ${XDG_CONFIG_DIR:-${HOME}/.config}/ipwaiter/orders"
  ipwaiter_chains="input output forward"
  raw_ipwaiter_chains="output"
  raw_mode=0
  next_argument_is_order_dir=0

  # Search for raw mode for different completions
  # Search for config dir asking
  for word in "${COMP_WORDS[@]}"; do
    if [ "${next_argument_is_order_dir}" -eq 1 ]; then
      possible_order_dirs="${possible_order_dirs} ${word}"
      next_argument_is_order_dir=0
    fi

    if [ "${word}" = "-R" ] || [ "${word}" = "--raw" ]; then
      raw_mode=1
    elif [ "${word}" = "-O" ] || [ "${word}" = "--orders" ]; then
      next_argument_is_order_dir=1
    fi
  done

  # Populate possible orders
  for order_dir in ${possible_order_dirs}; do
    if [ -d "${order_dir}" ]; then
      local full_ipwaiter_orders
      if [ "${raw_mode}" -eq 1 ]; then
        full_ipwaiter_orders="$(grep -i '^RAW' -l "${order_dir}/"*.order)"
      else
        full_ipwaiter_orders="$(grep -i '^FILTER' -l "${order_dir}/"*.order)"
      fi

      for full_order in ${full_ipwaiter_orders}; do
        ipwaiter_orders="${ipwaiter_orders} $(basename "${full_order}" '.order')"
      done
      unset full_ipwaiter_orders
    fi
  done

  case "${cur}" in
    --*)
      # shellcheck disable=SC2207
      COMPREPLY=( $(compgen -W "${ipwaiter_long_options}" -- "${cur}") )
      ;;
    -*)
      # shellcheck disable=SC2207
      COMPREPLY=( $(compgen -W "${ipwaiter_short_options}" -- "${cur}") )
      ;;
    *)
      case "${prev}" in
        -A|--add|-D|--delete)
          # shellcheck disable=SC2207
          if [ "${raw_mode}" -eq 1 ]; then
            COMPREPLY=( $(compgen -W "${raw_ipwaiter_chains}" -- "${cur}") )
          else
            COMPREPLY=( $(compgen -W "${ipwaiter_chains}" -- "${cur}") )
          fi
          ;;
        *)
          local using_chain
          local chains
          using_chain=0

          if [ "${raw_mode}" -eq 1 ]; then
            chains="${raw_ipwaiter_chains}"
          else
            chains="${ipwaiter_chains}"
          fi

          for chain in ${chains}; do
            if [ "${prev}" = "${chain}" ]; then
              using_chain=1
              break
            fi
          done

          if [ "${using_chain}" -eq 1 ]; then
            # shellcheck disable=SC2207
            COMPREPLY=( $(compgen -W "${ipwaiter_orders}" -- "${cur}") )
          else
            # shellcheck disable=SC2207
            COMPREPLY=( $(compgen -W "${ipwaiter_short_options}" -- "${cur}") )
          fi
          ;;
      esac
      ;;
  esac
}

complete -F _ipwaiter ipwaiter
